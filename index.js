require('dotenv').config();
const {
   Bot,
   Keyboard,
   InlineKeyboard,
   GrammyError,
   HttpError,
} = require('grammy');
const { getRandomQuestion, getCorrectAnswer } = require('./utils');
const { incrementStat, getStats, resetStats } = require('./userStats');
const questions = require('./questions.json');

const bot = new Bot(process.env.BOT_API_KEY);

// /start
bot.command('start', async (ctx) => {
   const startKeyboard = new Keyboard()
       .text('HTML')
       .text('CSS')
       .row()
       .text('JavaScript')
       .text('React')
       .row()
       .text('–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å')
       .resized();
   await ctx.reply(
       '–ü—Ä–∏–≤–µ—Ç! –Ø - Frontend quiz bot ü§ñ\n–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É.'
   );
   await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ üëá', {
      reply_markup: startKeyboard,
   });
});

// /reset
bot.command('reset', async (ctx) => {
   resetStats(ctx.from.id);
   await ctx.reply('üîÑ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
bot.hears(
    ['HTML', 'CSS', 'JavaScript', 'React', '–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å'],
    async (ctx) => {
       const topic = ctx.message.text.toLowerCase();
       const { question, questionTopic } = getRandomQuestion(topic);

       let inlineKeyboard;

       if (question.hasOptions) {
          const buttonRows = question.options.map((option) => [
             InlineKeyboard.text(
                 option.text,
                 JSON.stringify({
                    type: `${questionTopic}-option`,
                    isCorrect: option.isCorrect,
                    questionId: question.id,
                 })
             ),
          ]);

          inlineKeyboard = InlineKeyboard.from(buttonRows);
       } else {
          inlineKeyboard = new InlineKeyboard().text(
              '–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç',
              JSON.stringify({
                 type: questionTopic,
                 questionId: question.id,
              })
          );
       }

       await ctx.reply(question.text, {
          reply_markup: inlineKeyboard,
       });
    }
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
bot.on('callback_query:data', async (ctx) => {
   const callbackData = JSON.parse(ctx.callbackQuery.data);
   const userId = ctx.from.id;

   if (!callbackData.type.includes('option')) {
      const topic = callbackData.type;
      const question = questions[topic].find((q) => q.id === callbackData.questionId);
      let response = question.answer;

      if (question.source) {
         response += `\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: <a href="${question.source}" target="_blank">${question.source}</a>`;
      }

      await ctx.reply(response, {
         parse_mode: 'HTML',
         disable_web_page_preview: false,
      });
      await ctx.answerCallbackQuery();
      return;
   }

   const topic = callbackData.type.split('-')[0];
   const question = questions[topic].find((q) => q.id === callbackData.questionId);

   if (callbackData.isCorrect) {
      incrementStat(userId, true);
      await ctx.reply('–í–µ—Ä–Ω–æ ‚úÖ');
   } else {
      incrementStat(userId, false);
      const correctAnswer = question.options.find((o) => o.isCorrect).text;
      const source = question.source
          ? `\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: <a href="${question.source}" target="_blank">${question.source}</a>`
          : '';
      await ctx.reply(`–ù–µ–≤–µ—Ä–Ω–æ ‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}${source}`, {
         parse_mode: 'HTML',
         disable_web_page_preview: false,
      });
   }

   const stats = getStats(userId);
   await ctx.reply(`üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: ${stats.correct}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: ${stats.incorrect}`);

   await ctx.answerCallbackQuery();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π catch
bot.catch((err) => {
   const ctx = err.ctx;
   console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update ${ctx.update.update_id}:`);
   const e = err.error;
   if (e instanceof GrammyError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram:', e.description);
   } else if (e instanceof HttpError) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram:', e);
   } else {
      console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', e);
   }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
